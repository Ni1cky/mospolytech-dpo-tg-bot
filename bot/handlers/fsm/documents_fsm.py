import datetime
from typing import Any, Dict

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    CallbackQuery,
    InputMediaDocument,
    FSInputFile
)
from docxtpl import DocxTemplate

from bot.handlers.keyboards import agreement_keyboard


documents_fsm_router = Router()


class ApplicationForm(StatesGroup):
    agreement = State()
    program_name = State()
    full_name = State()
    birth_date = State()
    registration_address = State()
    living_address = State()
    passport_number = State()
    passport_given_by = State()
    passport_given_date = State()
    SNILS = State()
    phone = State()
    email = State()


@documents_fsm_router.message(F.text == "üìÑ –ó–∞—è–≤–ª–µ–Ω–∏–µ –∏ –¥–æ–≥–æ–≤–æ—Ä")
@documents_fsm_router.message(Command("documents"))
async def start_filling_documents(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏:\n"
        "–§–ò–û, –î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, –°–ù–ò–õ–°, –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, Email\n"
        "\n–ü—Ä–æ–¥–æ–ª–∂–∏–º?",
        reply_markup=agreement_keyboard()
    )
    await state.set_state(ApplicationForm.agreement)


@documents_fsm_router.callback_query(F.data == "stop", ApplicationForm.agreement)
async def stop(call: CallbackQuery, state: FSMContext):
    await call.answer("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /documents")
    await state.clear()


def qualification_from_program(program_name: str):
    # TODO: Some logic of getting qualification name from program name
    return "–õ—É—á—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –º–∏—Ä–µ"


def create_documents(data: Dict[str, Any], create_contract=True, create_application=False) -> list[InputMediaDocument]:
    result = []

    data["date"] = datetime.date.today()
    data["qualification_name"] = qualification_from_program(data["program_name"])

    if create_contract:
        # TODO: —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –±—Ä–∞–ª—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
        contract = DocxTemplate("docs_templates/contract_template.docx")
        contract.render(data)
        # TODO: —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –ø–∞–ø–∫–∞ –±—Ä–∞–ª–∞—Å—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
        file_path = f"created_docs/{data['full_name']} {datetime.datetime.now().strftime('%d.%m.%Y-%H.%M.%S')}.docx"
        contract.save(file_path)

        contract_to_return = InputMediaDocument(media=FSInputFile(file_path))
        result.append(contract_to_return)

    if create_application:
        # TODO: Logic of creating application
        pass

    return result


@documents_fsm_router.callback_query(F.data == "continue", ApplicationForm.agreement)
async def claim_agreement(call: CallbackQuery, state: FSMContext):
    await call.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º")
    await call.message.edit_reply_markup(reply_markup=None)

    data = await state.get_data()
    if data.get("agreement"):
        await call.message.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –î–ü–û! –£–¥–∞—á–∏ –≤ —É—á—ë–±–µ!")
        await call.message.answer_media_group(create_documents(data))
        await state.clear()
        return

    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –î–ü–û, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:")
    await state.update_data(agreement=True)
    await state.set_state(ApplicationForm.program_name)


@documents_fsm_router.message(F.text, ApplicationForm.program_name)
async def capture_program_name(message: Message, state: FSMContext):
    await state.update_data(program_name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
    await state.set_state(ApplicationForm.full_name)


@documents_fsm_router.message(F.text, ApplicationForm.full_name)
async def capture_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(ApplicationForm.birth_date)


@documents_fsm_router.message(F.text, ApplicationForm.birth_date)
async def capture_birth_date(message: Message, state: FSMContext):
    await state.update_data(birth_date=message.text)
    await message.answer("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    await state.set_state(ApplicationForm.registration_address)


@documents_fsm_router.message(F.text, ApplicationForm.registration_address)
async def capture_registration_address(message: Message, state: FSMContext):
    await state.update_data(registration_address=message.text)
    await message.answer("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")
    await state.set_state(ApplicationForm.living_address)


@documents_fsm_router.message(F.text, ApplicationForm.living_address)
async def capture_living_address(message: Message, state: FSMContext):
    await state.update_data(living_address=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞:")
    await state.set_state(ApplicationForm.passport_number)


@documents_fsm_router.message(F.text, ApplicationForm.passport_number)
async def capture_passport_number(message: Message, state: FSMContext):
    await state.update_data(passport_number=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ, –∫–µ–º –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç:")
    await state.set_state(ApplicationForm.passport_given_by)


@documents_fsm_router.message(F.text, ApplicationForm.passport_given_by)
async def capture_passport_given_by(message: Message, state: FSMContext):
    await state.update_data(passport_given_by=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(ApplicationForm.passport_given_date)


@documents_fsm_router.message(F.text, ApplicationForm.passport_given_date)
async def capture_passport_given_date(message: Message, state: FSMContext):
    await state.update_data(passport_given_date=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –°–ù–ò–õ–°:")
    await state.set_state(ApplicationForm.SNILS)


@documents_fsm_router.message(F.text, ApplicationForm.SNILS)
async def capture_SNILS(message: Message, state: FSMContext):
    await state.update_data(SNILS=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(ApplicationForm.phone)


def format_phone_number(phone_number: str):
    digits = "".join([digit for digit in phone_number if digit.isdigit()])
    formatted_number = f"+{digits[:-10]} ({digits[-10:-7]}) {digits[-7:-4]}-{digits[-4:-2]}-{digits[-2:]}"
    if formatted_number[1] == "8" and len(digits) == 11:
        formatted_number = "+7" + formatted_number[2:]
    return formatted_number


@documents_fsm_router.message(F.text, ApplicationForm.phone)
async def capture_phone(message: Message, state: FSMContext):
    await state.update_data(phone=format_phone_number(message.text))
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –í–∞—à email:")
    await state.set_state(ApplicationForm.email)


@documents_fsm_router.message(F.text, ApplicationForm.email)
async def capture_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    data = await state.get_data()
    await message.answer(
        f"–í—Å—ë –≥–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–Ω–µ—Å—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n"
        f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –î–ü–û: {data['program_name']}\n"
        f"–§–ò–û: {data['full_name']}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_date']}\n"
        f"–ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data['registration_address']}\n"
        f"–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {data['living_address']}\n"
        f"–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: {data['passport_number']}\n"
        f"–í—ã–¥–∞–Ω: {data['passport_given_by']}, {data['passport_given_date']}\n"
        f"–°–ù–ò–õ–°: {data['SNILS']}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['phone']}\n"
        f"Email: {data['email']}",
        reply_markup=agreement_keyboard()
    )
    await state.set_state(ApplicationForm.agreement)
